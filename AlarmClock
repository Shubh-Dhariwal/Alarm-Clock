import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Timer;
import java.util.TimerTask;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

public class AlarmClock {

    private JFrame frame;
    private JTextField timeField;
    private JLabel songLabel;
    private File selectedSong;

    public AlarmClock() {
        initialize();
    }

    private void initialize() {
        frame = new JFrame("Alarm Clock");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new GridLayout(5, 1));

        JLabel timeLabel = new JLabel("Set Alarm Time (HH:MM:SS AM/PM):");
        timeField = new JTextField();
        JButton setAlarmButton = new JButton("Set Alarm");
        JButton chooseSongButton = new JButton("Choose Song");
        songLabel = new JLabel("No song selected");

        frame.add(timeLabel);
        frame.add(timeField);
        frame.add(chooseSongButton);
        frame.add(setAlarmButton);
        frame.add(songLabel);

        chooseSongButton.addActionListener(e -> chooseSong());
        setAlarmButton.addActionListener(e -> setAlarm());

        frame.setVisible(true);
    }

    private void chooseSong() {
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(frame);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedSong = fileChooser.getSelectedFile();
            songLabel.setText("Selected: " + selectedSong.getName());
        }
    }

    private void setAlarm() {
        String alarmTime = timeField.getText().trim();
        if (!alarmTime.matches("\\d{2}:\\d{2}:\\d{2} (AM|PM)")) {
            JOptionPane.showMessageDialog(frame, "Invalid time format. Use HH:MM:SS AM/PM", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            LocalTime alarm = LocalTime.parse(alarmTime, DateTimeFormatter.ofPattern("hh:mm:ss a"));

            Timer timer = new Timer();
            timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                    LocalTime currentTime = LocalTime.now();
                    if (currentTime.getHour() == alarm.getHour()
                            && currentTime.getMinute() == alarm.getMinute()
                            && currentTime.getSecond() == alarm.getSecond()) {
                        timer.cancel();
                        playSong();
                        JOptionPane.showMessageDialog(frame, "Alarm Ringing!", "Alarm", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }, 0, 1000);

            JOptionPane.showMessageDialog(frame, "Alarm set for " + alarmTime, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Error setting alarm: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void playSong() {
        if (selectedSong != null) {
            try {
                Clip clip = AudioSystem.getClip();
                clip.open(AudioSystem.getAudioInputStream(selectedSong));
                clip.start();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(frame, "Error playing song: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(frame, "No song selected to play", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(AlarmClock::new);
    }
}
